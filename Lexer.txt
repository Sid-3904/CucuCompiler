TYPE : int
ID : i
ASSIGN : =
L_RD_BRACKET : (
ID : x
MUL : *
NUM : 2
PLUS : +
NUM : 5
R_RD_BRACKET : )
DIV : /
NUM : 3
SEMI : ;
TYPE : int
ID : j
SEMI : ;
TYPE : char *
ID : s
ASSIGN : =
TYPE : string "Hello World"
SEMI : ;
TYPE : int
ID : foo1
L_RD_BRACKET : (
TYPE : int
ID : a
COMMA : ,
TYPE : char *
ID : s
R_RD_BRACKET : )
L_CL_BRACKET : {
WHILE
L_RD_BRACKET : (
ID : a
LS_THAN : <
NUM : 10
R_RD_BRACKET : )
L_CL_BRACKET : {
ID : a
ASSIGN : =
ID : a
MINUS : +
NUM : 1
SEMI : ;
R_CL_BRACKET : }
IF
L_RD_BRACKET : (
ID : a
EQL : ==
NUM : 0
R_RD_BRACKET : )
L_CL_BRACKET : {
ID : i
ASSIGN : =
NUM : 9
SEMI : ;
R_CL_BRACKET : }
RETURN
NUM : 2
SEMI : ;
R_CL_BRACKET : }
TYPE : int
ID : foo2
L_RD_BRACKET : (
TYPE : int
ID : s
R_RD_BRACKET : )
SEMI : ;
TYPE : char *
ID : foo1
L_RD_BRACKET : (
TYPE : int
ID : a
COMMA : ,
TYPE : char *
ID : s
R_RD_BRACKET : )
SEMI : ;
